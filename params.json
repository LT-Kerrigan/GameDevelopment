{"name":"Rendering Engine","tagline":"Graphics and Physics Engine developed from the ground up using OpenGL 4.3, C++, GLEW, and CUDA.","body":"# Rendering  & Physics Engine with OpenGL 4.3.\r\n\r\nThe current project consists of a graphics framework developed in C++, OpenGL 4.3., GLEW, and GLSL as the foundation. On top of this framework the physics engine was developed using C++ and CUDA. \r\n\r\n## Table of contents\r\n\r\n- [Graphics engine] (#graphics-engine)\r\n- [Physics engine] (#physics-engine)\r\n- [Tools used] (#dev-tools)\r\n- [Available demos] (#available-demos)\r\n- [Getting started] (#getting-started)\r\n- [Documentation] (#documentation)\r\n- [About the creator] (#about-creator)\r\n- [Copyright and license] (#copyright)\r\n\r\n## Graphics engine\r\n Built from the ground up without relying on GLU/GLUT, and features only OpenGL 4.3 pipeline.\r\n### Structure:\r\n The Graphics Framework is modular: it presents core functionality (mesh readers, camera definitions, height map generation, etc.) along with a set of projects to test each of these features incrementally. An overview follows:\r\n \r\n \r\n```\r\nGraphicsFramework/\r\n├── Core/\r\n│   ├── Mesh.cpp\r\n│   ├── OGLRenderer.cpp\r\n│   ├── Shaders.cpp\r\n|   ├── Camera.cpp\r\n|   ├── Light.cpp\r\n|   ├── Frustum.cpp\r\n|   ├── Foliage.cpp\r\n|   ├── GenericInput.cpp\r\n|   ├── MD5Animation.cpp\r\n|   ├── MD5FileData.cpp\r\n|   ├── MD5Mesh.cpp\r\n|   ├── MD5Node.cpp\r\n|   ├── Matrix4.cpp\r\n|   ├── OBJMesh.cpp\r\n|   ├── Plane.cpp\r\n|   ├── Quaternion.cpp\r\n|   ├── SceneNode.cpp\r\n|   ├── Vector2.h\r\n|   ├── Vector3.h\r\n|   ├── Vector4.h\r\n|   ├── Window.cpp\r\n│   └── HeightMap.cpp\r\n├── Tests/\r\n│   ├── HelloWorldTriangle\r\n|   ├── Matrix Transformations\r\n|   ├── Texturing\r\n|   ├── Depth & Transparency\r\n|   ├── Stencils & Scissors\r\n|   ├── Scene Management Graph\r\n|   ├── Index Buffers\r\n|   ├── Skeletal Animation\r\n|   ├── Post Processing\r\n|   ├── Per pixel lighting\r\n|   ├── Shadow Mapping\r\n|   ├── Deffered rendering\r\n|   ├── Conversion 2D to 3D\r\n|   ├── Text\r\n|   ├── Geometry Shaders\r\n|   ├── Texture Atlas\r\n│   └── Signal To Terrain\r\n└── Shader Types/\r\n    ├── Cartoon\r\n    ├── Transparent\r\n    ├── Reflective\r\n    └── Particle\r\n```\r\n\r\n##Physics Engine\r\nThe framework describes physics and real-time algorithms mathematically. The real-time collision detection simulates solid body interaction.\r\n```\r\nPhysicsFramework/\r\n├── Core/\r\n│   ├── RigidBodies\r\n│   ├── SoftBodies\r\n│   ├── Particles\r\n|   ├── NumericalIntegration\r\n|   ├── AngularMotion\r\n|   ├── CollisionDetection\r\n|   ├── CollisionResponse\r\n|   ├── Broadphase\r\n|   ├── Narrowphase\r\n|   ├── Impulse\r\n|   ├── Penalty\r\n|   ├── Torque\r\n|   ├── Spring\r\n|   ├── SUVAC\r\n│   └── FluidDynamics\r\n├── Tests/\r\n│   ├── SimpleCollision\r\n|   ├── CollisionDetectResponse\r\n|   ├── Damping\r\n│   └── PenaltyTest\r\n└── CUDAIntegration/\r\n```\r\n \r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}